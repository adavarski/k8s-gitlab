#!/bin/sh
set -e

if [ -z "$1" -o -z "$2" ]; then
  echo "Usage: $0 RELEASE-NAME CHART_DIR [helm-args]" >&2
  echo "e.g.: $0 myapp /myapp/deploy/chart/ -f "values-${CI_ENVIRONMENT_SLUG:-prd}.yml" --set="image.tag=${CI_COMMIT_TAG:-1.0}",nameOverride=\$CI_ENVIRONMENT_SLUG"
  exit 1
fi

RELEASE_NAME="$1"
APP_NAME=$CI_ENVIRONMENT_SLUG
KUBE_NAMESPACE="${KUBE_NAMESPACE:-default}"

# Automatically use a namespace-based tiller if available,
# or the cluster-wide installed version if this is possible.
if [ -z "$TILLER_NAMESPACE" ]; then
  if [ -n "$( kubectl get pods --namespace=$KUBE_NAMESPACE -l 'app=helm,name=tiller' -o name)" ]; then
    echo "Found namespace-based tiller installation"
    TILLER_NAMESPACE=$KUBE_NAMESPACE
  elif [ "$(kubectl auth can-i create pods --subresource=portforward --namespace=kube-system)" = "yes" ]; then
    # Can connect with central installed Tiller, use it to deploy the project
    # Note this could mean that deployments have full cluster-admin access!
    TILLER_NAMESPACE="kube-system"
    echo "Found cluster-wide tiller installation"
  elif [ "$(kubectl auth can-i create pods --subresource=portforward --namespace=$NAMESPACE)" = "yes" ]; then
    # Can connect with namespace based Tiller
    TILLER_NAMESPACE="${TILLER_NAMESPACE:-$KUBE_NAMESPACE}"
  else
    echo "No RBAC permission to contact to tiller in either 'kube-system' or '$NAMESPACE'" >&2
    exit 1
  fi
fi

echo "Using tiller in namespace $TILLER_NAMESPACE"
echo "Current release:"
helm ls --tiller-namespace "$TILLER_NAMESPACE" --namespace "$KUBE_NAMESPACE" $RELEASE_NAME

echo
echo "Deploying app $APP_NAME (git ${CI_COMMIT_TAG:-$CI_COMMIT_REF_NAME} $CI_COMMIT_SHA)"
set -x
helm upgrade --install --tiller-namespace "$TILLER_NAMESPACE" --namespace "$KUBE_NAMESPACE" --reset-values --set="nameOverride=$APP_NAME" "$@"
{ set +x; } 2>/dev/null

echo
echo "Follow the release status using:"
echo
echo "  helm status --tiller-namespace=$TILLER_NAMESPACE $RELEASE_NAME"
echo
